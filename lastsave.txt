
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R est un logiciel libre livré sans AUCUNE GARANTIE.
Vous pouvez le redistribuer sous certaines conditions.
Tapez 'license()' ou 'licence()' pour plus de détails.

R est un projet collaboratif avec de nombreux contributeurs.
Tapez 'contributors()' pour plus d'information et
'citation()' pour la façon de le citer dans les publications.

Tapez 'demo()' pour des démonstrations, 'help()' pour l'aide
en ligne ou 'help.start()' pour obtenir l'aide au format HTML.
Tapez 'q()' pour quitter R.

> ## A pair of functions that cache the inverse of a matrix.
> ## This function creates a special "matrix" object that can cache its inverse.
> 
> makeCacheMatrix <- function(x = matrix()) {
+   inv <- NULL
+   set <- function(y){
+     x <<- y
+ 
+   }
+   get <- function() x
+   setInverse <- function(solveMatrix) inv <<- solveMatrix
+   getInverse <- function() inv
+   list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
+ }
> ## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
> cacheSolve <- function(x, ...) {
+   ## Return a matrix that is the inverse of 'x'
+   inv <- x$getInverse()
+   if(!is.null(inv)){
+     message("getting cached data")
+     return(inv)
+   }
+   data <- x$get()
+   inv <- solve(data)
+   x$setInverse(inv)
+   inv      
+ }
